This demo is on how to work with servlets

What Is a Servlet? -  reference oracle docs
-----------------
A servlet is a Java programming language class that is used to extend the capabilities of servers that host applications 
accessed by means of a request-response programming model. Although servlets can respond to any type of request, 
they are commonly used to extend the applications hosted by web servers. For such applications, Java Servlet technology 
defines HTTP-specific servlet classes.

The javax.servlet and javax.servlet.http packages provide interfaces and classes for writing servlets. 
All servlets must implement the Servlet interface, which defines life-cycle methods. 
When implementing a generic service, you can use or extend the GenericServlet class provided with the Java Servlet API. 
The HttpServlet class provides methods, such as doGet and doPost, for handling HTTP-specific services.

Servlet heirachy reference
-------------------------- 
	- http://j2eetutorials.50webs.com/completejava.50webs.com/servlet-class-hierarchy.jpg
	- https://www.journaldev.com/wp-content/uploads/2013/08/Servlet-Hierarchy-450x182.png

web container in the web server

Stages of the Servlet Life Cycle: The Servlet life cycle mainly goes through four stages,
---------------------------------------------------------------------------------------------
Loading a Servlet.
	- means loading the servlet class into the memory
	
Initializing the Servlet. 
	- init()
	- called only once in a servlet's lifecycle
	
Request handling. 
	- service()
	- called every time a request is sent to the servlet
	- the service() method calls the doGet() or doPost() method if we are working with HttpServlet
	
Destroying the Servlet. 
	- destroy()
	- called only once in a servlet's lifecycle

image reference - https://media.geeksforgeeks.org/wp-content/uploads/Life-Cycle-Of-Servlet.jpg

Project setup
-------------
1) create a new maven project
2) choose the archetype as maven-archetype-webapp archetype
3) right click on the project folder to create new servlet
4) write the code in the doGet method

get request
	- default 
	- here the request parameters are appended to the URL as name/value pairs
	
post request
	- have to specify explicity
	- here the request parameters are sent through the request body
	
redirecting of the incomming request - 2 ways
----------------------------------------------
	- response.sendRedirect("LoginFailure.html");
		- here a round trip of a dummy response and a new request is made to the webpage from the servlet
	- RequestDispatcher
		- here the same request & response is either forwarded to another page or included in the servlet
		- no round trip
		- no new request
 

 image reference - https://i.stack.imgur.com/a3pCn.png
 
 http is stateless
 	- it does not maintain the state
 	- whenever a new http request comes in, the data(request parameters, request attributes) associated with the old request is lost

session management - 4 ways
---------------------------
	- hidden form field
		- here you place hidden form field <input type="hidden" value="John">
		- it is not feasible to keep track if we have to kleep track of more number of data in more number pages
	- URL rewriting
		- here we rewrite the URL of the page that we are requesting for
	- Cookies
		- name/value pair that is sent to the client machine and it is saved in the client's machine
		- add the cookies to the repsonse so the cookie goes along the response and is saved in the client's machine
		- for every subsequent request the cookies is attached to the request and sent to the server
	- HttpSession API
		- we can create a new session(login), or be a part of an existing session 
		- WE CAN KEEP ADDING DATA to the session
		- we invalidate the session when we no longer need it(logout)
		- the server keeps track of the session, so it is an over head to the server
		- JWT (JSON Web Token) - explore
		
		
MVC design  
Model - Pojo
View - Html, and AJAX calls to the servlet
Controller - Servlet

we still have the service and dao layer
from the view we make ajax request to the controller, the controller contacts service layer, service layer contacts dao layer

SPA (Single Page Application) or MPA(Multi Page Application)

